!function(c){var n={};function t(e){if(n[e])return n[e].exports;var g=n[e]={i:e,l:!1,exports:{}};return c[e].call(g.exports,g,g.exports,t),g.l=!0,g.exports}t.m=c,t.c=n,t.d=function(c,n,e){t.o(c,n)||Object.defineProperty(c,n,{enumerable:!0,get:e})},t.r=function(c){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(c,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(c,"__esModule",{value:!0})},t.t=function(c,n){if(1&n&&(c=t(c)),8&n)return c;if(4&n&&"object"==typeof c&&c&&c.__esModule)return c;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:c}),2&n&&"string"!=typeof c)for(var g in c)t.d(e,g,function(n){return c[n]}.bind(null,g));return e},t.n=function(c){var n=c&&c.__esModule?function(){return c.default}:function(){return c};return t.d(n,"a",n),n},t.o=function(c,n){return Object.prototype.hasOwnProperty.call(c,n)},t.p="",t(t.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/constants.js\nconst countries = {\r\n    Argentina: 'ar', \r\n    Australia: 'au',\r\n    Austria: 'at',\r\n    Belgium: 'be',\r\n    Bulgaria: 'bg',\r\n    Brazil: 'br',\r\n    Canada: 'ca',\r\n    China: 'cn',\r\n    Colombia: 'co',\r\n    Cuba: 'cu',\r\n    'Czech Republic': 'cz',\r\n    Germany: 'de',\r\n    Egypt: 'eg',\r\n    France: 'fr',\r\n    'United Kingdom': 'gb',\r\n    Greece: 'gr',\r\n    'Hong Kong': 'hk',\r\n    Hungary: 'hu',\r\n    Indonesia: 'id',\r\n    Ireland: 'ie',\r\n    Israel: 'il',\r\n    India: 'in',\r\n    Italy: 'it',\r\n    Japan: 'jp',\r\n    Korea: 'kr',\r\n    Lithuania: 'lt',\r\n    Latvia: 'lv',\r\n    Morocco: 'ma',\r\n    Mexico: 'mx',\r\n    Malaysia: 'my',\r\n    Nigeria: 'ng',\r\n    Netherlands: 'nl',\r\n    Norway: 'no',\r\n    'New Zealand': 'nz',\r\n    Philippines: 'ph',\r\n    Poland: 'pl',\r\n    Portugal: 'pt',\r\n    Romania: 'ro',\r\n    Serbia: 'rs',\r\n    Russia: 'ru',\r\n};\r\n\r\nconst categories = {\r\n    Business: 'business',\r\n    Entertainment: 'entertainment',\r\n    General: 'general',\r\n    Health: 'health',\r\n    Science: 'science',\r\n    Sports: 'sports',\r\n    Technology: 'technology'\r\n};\r\n\r\nconst apiKey = '8451785d44d5442ba1501e02b76f1057';\r\nconst baseUrl = 'https://newsapi.org/v2';\r\nconst defaultLanguage = 'en';\r\nconst dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/app.js\n\r\n\r\nconst state = {\r\n    category: '',\r\n    country: '',\r\n    keyWord: ''\r\n};\r\n\r\nconst getData = ({ endPoint = 'top-headlines', category, country, source, keyWord }) => {\r\n    let url;\r\n    \r\n    if(endPoint === 'sources') {\r\n        url = `${baseUrl}/${endPoint}?apiKey=${apiKey}`;\r\n    } else if (source) {\r\n        url = `${baseUrl}/${endPoint}?sources=${source}&apiKey=${apiKey}`;\r\n    } else {\r\n        url = `${baseUrl}/${endPoint}?country=${country}&category=${category}&q=${keyWord}&language=${defaultLanguage}&apiKey=${apiKey}`;\r\n    }\r\n\r\n    const request = new Request(url);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        fetch(request)\r\n            .then((response) => response.json())\r\n            .then((data) => {                \r\n                data.status === 'ok' ? resolve(data) : reject(data.message);\r\n            })\r\n            .catch((message) => {\r\n                throw Error(message);\r\n            });\r\n    }); \r\n};\r\n\r\nconst getSources = () => {       \r\n    return getData({ endPoint: 'sources' });  \r\n};\r\n\r\nconst fillSelector = (selector, data, templateId) => {\r\n    const template = document.getElementById(templateId); \r\n    const templateContent = template.content; \r\n    const listItem = templateContent.querySelector('li');\r\n\r\n    for(let item in data) {            \r\n        listItem.textContent = item;\r\n        listItem.id = data[item];\r\n        const itemClone = document.importNode(templateContent, true);\r\n        selector.appendChild(itemClone);        \r\n    }\r\n};\r\n\r\nconst handleSelectorItem = (event) => {\r\n    const target = event.target;\r\n    const classList = target && Array.from(target.classList);\r\n    const itemType = classList && classList.find((item) => {\r\n        return item.includes('selector-item');\r\n    });\r\n      \r\n    if(itemType) {        \r\n        const itemText = target.innerHTML;\r\n        const itemId = target.id;\r\n\r\n        switch(itemType) {\r\n        case 'country-selector-item':\r\n            if(itemId === 'unselected-country' ) {\r\n                countrySelectorLabel.innerHTML = 'Select Country';\r\n                state.country = ''; \r\n            } else {\r\n                countrySelectorLabel.innerHTML = itemText;\r\n                state.country = itemId;                 \r\n            }                       \r\n            break;                \r\n        case 'category-selector-item':   \r\n            if(itemId === 'unselected-category' ) {\r\n                categorySelectorLabel.innerHTML = 'Select Category';\r\n                state.category = ''; \r\n            } else {\r\n                categorySelectorLabel.innerHTML = itemText;\r\n                state.category = itemId;                 \r\n            }\r\n            break;\r\n        }           \r\n    }        \r\n};\r\n\r\nconst handleSelector = (event) => {\r\n    const currentTarget = event.currentTarget;    \r\n    let target = event.target;\r\n    let isSelector;\r\n    let selectorType;\r\n   \r\n    while(target !== currentTarget) {        \r\n        if(target.classList.contains('option-list-container')) {\r\n            isSelector = true;    \r\n            selectorType = target.id;        \r\n            break;\r\n        }\r\n        target = target.parentElement;\r\n    }    \r\n\r\n    if(isSelector && selectorType) {\r\n        showList(selectorType);\r\n    }  \r\n};\r\n\r\nconst showList = selectorType => {\r\n    switch(selectorType) {\r\n    case 'categories':        \r\n        categorySelector.classList.toggle('hidden');\r\n        break;\r\n                \r\n    case 'countries':\r\n        countrySelector.classList.toggle('hidden');\r\n        break;\r\n    }\r\n};\r\n\r\nconst handleKeyWordInput = (event) => {\r\n    const text = event.target.value;\r\n    state.keyWord = text;    \r\n};\r\n\r\nconst fillSourcesModal = (sources, sourcesModal) => {   \r\n    const sourcesContainer = sourcesModal.querySelector('.sources-container');    \r\n    const template = sourcesContainer.querySelector('#source-item-template'); \r\n    const templateContent = template.content; \r\n    const sourceItem = templateContent.querySelector('.source-item');\r\n\r\n    sources.forEach((source) => {\r\n        sourceItem.textContent = source.name;\r\n        sourceItem.id = source.id;\r\n        const itemClone = document.importNode(templateContent, true);\r\n        sourcesContainer.appendChild(itemClone); \r\n    });\r\n};\r\n\r\nconst showOrHideSourcesModal = () => {\r\n    document.documentElement.scrollTop = 0;\r\n    mainPage.classList.toggle('hidden');\r\n    sourcesModal.classList.toggle('hidden');\r\n    sourcesModal.scrollTop = 0;\r\n};\r\n\r\nconst getNewsBySource = (source) => {\r\n    switchLoadingIndication();\r\n    \r\n    getData({ source })\r\n        .then((data) => {\r\n            showNews(data.articles);        \r\n            switchLoadingIndication();                         \r\n        }).catch((message) => {\r\n            throw Error(message);\r\n        });\r\n};\r\n\r\nconst handleSourceItem = () => {\r\n    const target = event.target;\r\n   \r\n    if(target.classList.contains('source-item')) {\r\n        showOrHideSourcesModal();\r\n        getNewsBySource(target.id);    \r\n    }   \r\n};\r\n\r\nconst getFilteredNews = () => {           \r\n    switchLoadingIndication();\r\n\r\n    getData(state).then((data) => {\r\n        showNews(data.articles);    \r\n        switchLoadingIndication();                    \r\n    }).catch((message) => {\r\n        throw Error(message);\r\n    });\r\n};\r\n\r\nconst switchLoadingIndication = () => {\r\n    newsContainer.classList.toggle('loading');\r\n};\r\n\r\nconst showNews = articles => {\r\n    const template = document.getElementById('article-template');\r\n    const templateContent = template.content;\r\n    const title = templateContent.querySelector('h2');\r\n    const image = templateContent.querySelector('img');\r\n    const description = templateContent.querySelector('.description');\r\n    const author = templateContent.querySelector('.author');\r\n    const date = templateContent.querySelector('.date');\r\n    const link = templateContent.querySelector('.news-link');\r\n    const authorContainer = templateContent.querySelector('.author-container');\r\n    const dateContainer = templateContent.querySelector('.date-container');\r\n\r\n    [image, authorContainer, dateContainer].forEach((node) => {\r\n        const classList = node.classList;\r\n        classList.contains('hidden') && classList.toggle('hidden');\r\n    });\r\n\r\n    newsContainer.innerHTML = '';\r\n    articles.forEach((article) => {\r\n        const urlToImage = article.urlToImage;\r\n        const articleAuthor = article.author;\r\n        const articleDate = article.publishedAt;      \r\n        \r\n        urlToImage === null ? image.classList.toggle('hidden') : image.src = urlToImage;\r\n        articleAuthor === null ? authorContainer.classList.toggle('hidden') : author.textContent = articleAuthor;\r\n        articleDate === null ? dateContainer.classList.toggle('hidden') : date.textContent = new Date(articleDate).toLocaleDateString('en-US', dateOptions);\r\n        title.textContent = article.title;\r\n        description.textContent = article.description;  \r\n        link.href = article.url;\r\n\r\n        const articleClone = document.importNode(templateContent, true);\r\n        newsContainer.appendChild(articleClone); \r\n    });\r\n    \r\n    newslist.scrollTop = 0; \r\n};\r\n\r\nconst showOptions = () => {\r\n    if(optionsContainer.classList.contains('visible')) {\r\n        return;\r\n    }\r\n\r\n    optionsContainer.classList.add('visible');\r\n    setTimeout(() => {\r\n        document.body.addEventListener('click', hideOptions);\r\n    }, 10);\r\n};\r\n\r\nconst hideOptions = (event) => {\r\n    let target = event.target; \r\n    const currentTarget = event.currentTarget;  \r\n\r\n    while(target !== currentTarget) {\r\n        const classList = target.classList;\r\n\r\n        if(classList.contains('search-options')) {            \r\n            return;\r\n        } else if(classList.contains('get-news')) {\r\n            break;            \r\n        }\r\n        target = target.parentNode;\r\n    }\r\n    optionsContainer.classList.remove('visible');\r\n    document.body.removeEventListener('click', hideOptions);\r\n};\r\n\r\n\r\nconst mainPage = document.querySelector('#main-page');\r\nconst countrySelector = document.querySelector('.county-selector');\r\nconst categorySelector = document.querySelector('.category-selector');\r\nconst getNewsButton = document.querySelector('.get-news');\r\nconst optionsContainer = document.querySelector('.search-options');\r\nconst countrySelectorLabel = document.querySelector('.selected-country');\r\nconst categorySelectorLabel = document.querySelector('.selected-categoty');\r\nconst keyWordInput = document.getElementById('key-word');\r\nconst newsBySourceButton = document.querySelector('.sources-button');\r\nconst sourcesModal = document.querySelector('.sources-modal');\r\nconst sourcesModalCloseButton = document.querySelector('.close-modal-button');\r\nconst newsContainer = document.querySelector('.news-container');\r\nconst newslist = document.querySelector('.main-wrapper');\r\nconst optionsHumburger = document.querySelector('.options-humb');\r\nconst sourcesHumburger = document.querySelector('.sources-humb');\r\n\r\ncategorySelector.onclick = handleSelectorItem;\r\ncountrySelector.onclick = handleSelectorItem;\r\noptionsContainer.onclick = handleSelector;\r\ngetNewsButton.onclick = getFilteredNews;\r\nnewsBySourceButton.onclick = showOrHideSourcesModal;\r\nkeyWordInput.onchange = handleKeyWordInput;\r\nsourcesModalCloseButton.onclick = showOrHideSourcesModal;\r\nsourcesModal.onclick = handleSourceItem;\r\nsourcesHumburger.onclick = showOrHideSourcesModal;\r\noptionsHumburger.onclick = showOptions;\r\n\r\nfillSelector(countrySelector, countries,'country-item-template');\r\nfillSelector(categorySelector, categories,'category-item-template');\r\n\r\ngetSources().then((data) => {\r\n    fillSourcesModal(data.sources, sourcesModal);\r\n}).catch((message) => {\r\n    throw Error(message);\r\n});\r\n\r\ngetFilteredNews();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RhbnRzLmpzPzVmYjAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcz8xMTEyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCOztBQVNuQjs7O0FDakVrRzs7QUFFcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsaUVBQWlFO0FBQ25GOztBQUVBO0FBQ0EsaUJBQWlCLE9BQU8sQ0FBQyxHQUFHLFNBQVMsVUFBVSxNQUFNLENBQUM7QUFDdEQsS0FBSztBQUNMLGlCQUFpQixPQUFPLENBQUMsR0FBRyxTQUFTLFdBQVcsT0FBTyxVQUFVLE1BQU0sQ0FBQztBQUN4RSxLQUFLO0FBQ0wsaUJBQWlCLE9BQU8sQ0FBQyxHQUFHLFNBQVMsV0FBVyxRQUFRLFlBQVksU0FBUyxLQUFLLFFBQVEsWUFBWSxlQUFlLENBQUMsVUFBVSxNQUFNLENBQUM7QUFDdkk7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLEtBQUssRTtBQUNMOztBQUVBLDBCO0FBQ0Esb0JBQW9CLHNCQUFzQixFO0FBQzFDOztBQUVBO0FBQ0EseUQ7QUFDQSw2QztBQUNBOztBQUVBLDJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLGtCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsdUM7QUFDQSxhO0FBQ0Esa0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQztBQUNBLGFBQWE7QUFDYjtBQUNBLHdDO0FBQ0E7QUFDQTtBQUNBLFM7QUFDQSxLO0FBQ0E7O0FBRUE7QUFDQSw4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQztBQUNBO0FBQ0EsOEI7QUFDQSxxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEs7O0FBRUE7QUFDQTtBQUNBLEs7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCO0FBQ0E7O0FBRUEscUQ7QUFDQSw4RTtBQUNBLDZFO0FBQ0EsNkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGFBQWEsU0FBUztBQUN0QjtBQUNBLG9DO0FBQ0Esc0M7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUM7QUFDQSxLO0FBQ0E7O0FBRUEsK0I7QUFDQTs7QUFFQTtBQUNBLGdDO0FBQ0Esa0M7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEOztBQUVBO0FBQ0E7QUFDQSwrSUFBK0ksV0FBVztBQUMxSjtBQUNBLHNEO0FBQ0E7O0FBRUE7QUFDQSxnRDtBQUNBLEtBQUs7O0FBRUwsMkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSw4QjtBQUNBLDhDOztBQUVBO0FBQ0E7O0FBRUEsa0Q7QUFDQTtBQUNBLFNBQVM7QUFDVCxrQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4QixTQUFTO0FBQ3ZDLCtCQUErQixVQUFVOztBQUV6QztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY291bnRyaWVzID0ge1xyXG4gICAgQXJnZW50aW5hOiAnYXInLCBcclxuICAgIEF1c3RyYWxpYTogJ2F1JyxcclxuICAgIEF1c3RyaWE6ICdhdCcsXHJcbiAgICBCZWxnaXVtOiAnYmUnLFxyXG4gICAgQnVsZ2FyaWE6ICdiZycsXHJcbiAgICBCcmF6aWw6ICdicicsXHJcbiAgICBDYW5hZGE6ICdjYScsXHJcbiAgICBDaGluYTogJ2NuJyxcclxuICAgIENvbG9tYmlhOiAnY28nLFxyXG4gICAgQ3ViYTogJ2N1JyxcclxuICAgICdDemVjaCBSZXB1YmxpYyc6ICdjeicsXHJcbiAgICBHZXJtYW55OiAnZGUnLFxyXG4gICAgRWd5cHQ6ICdlZycsXHJcbiAgICBGcmFuY2U6ICdmcicsXHJcbiAgICAnVW5pdGVkIEtpbmdkb20nOiAnZ2InLFxyXG4gICAgR3JlZWNlOiAnZ3InLFxyXG4gICAgJ0hvbmcgS29uZyc6ICdoaycsXHJcbiAgICBIdW5nYXJ5OiAnaHUnLFxyXG4gICAgSW5kb25lc2lhOiAnaWQnLFxyXG4gICAgSXJlbGFuZDogJ2llJyxcclxuICAgIElzcmFlbDogJ2lsJyxcclxuICAgIEluZGlhOiAnaW4nLFxyXG4gICAgSXRhbHk6ICdpdCcsXHJcbiAgICBKYXBhbjogJ2pwJyxcclxuICAgIEtvcmVhOiAna3InLFxyXG4gICAgTGl0aHVhbmlhOiAnbHQnLFxyXG4gICAgTGF0dmlhOiAnbHYnLFxyXG4gICAgTW9yb2NjbzogJ21hJyxcclxuICAgIE1leGljbzogJ214JyxcclxuICAgIE1hbGF5c2lhOiAnbXknLFxyXG4gICAgTmlnZXJpYTogJ25nJyxcclxuICAgIE5ldGhlcmxhbmRzOiAnbmwnLFxyXG4gICAgTm9yd2F5OiAnbm8nLFxyXG4gICAgJ05ldyBaZWFsYW5kJzogJ256JyxcclxuICAgIFBoaWxpcHBpbmVzOiAncGgnLFxyXG4gICAgUG9sYW5kOiAncGwnLFxyXG4gICAgUG9ydHVnYWw6ICdwdCcsXHJcbiAgICBSb21hbmlhOiAncm8nLFxyXG4gICAgU2VyYmlhOiAncnMnLFxyXG4gICAgUnVzc2lhOiAncnUnLFxyXG59O1xyXG5cclxuY29uc3QgY2F0ZWdvcmllcyA9IHtcclxuICAgIEJ1c2luZXNzOiAnYnVzaW5lc3MnLFxyXG4gICAgRW50ZXJ0YWlubWVudDogJ2VudGVydGFpbm1lbnQnLFxyXG4gICAgR2VuZXJhbDogJ2dlbmVyYWwnLFxyXG4gICAgSGVhbHRoOiAnaGVhbHRoJyxcclxuICAgIFNjaWVuY2U6ICdzY2llbmNlJyxcclxuICAgIFNwb3J0czogJ3Nwb3J0cycsXHJcbiAgICBUZWNobm9sb2d5OiAndGVjaG5vbG9neSdcclxufTtcclxuXHJcbmNvbnN0IGFwaUtleSA9ICc4NDUxNzg1ZDQ0ZDU0NDJiYTE1MDFlMDJiNzZmMTA1Nyc7XHJcbmNvbnN0IGJhc2VVcmwgPSAnaHR0cHM6Ly9uZXdzYXBpLm9yZy92Mic7XHJcbmNvbnN0IGRlZmF1bHRMYW5ndWFnZSA9ICdlbic7XHJcbmNvbnN0IGRhdGVPcHRpb25zID0geyB3ZWVrZGF5OiAnbG9uZycsIHllYXI6ICdudW1lcmljJywgbW9udGg6ICdsb25nJywgZGF5OiAnbnVtZXJpYycgfTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBjb3VudHJpZXMsXHJcbiAgICBjYXRlZ29yaWVzLFxyXG4gICAgYXBpS2V5LFxyXG4gICAgYmFzZVVybCxcclxuICAgIGRlZmF1bHRMYW5ndWFnZSxcclxuICAgIGRhdGVPcHRpb25zXHJcbn07XHJcbiIsImltcG9ydCB7IGNvdW50cmllcywgY2F0ZWdvcmllcywgYXBpS2V5LCBiYXNlVXJsLCBkZWZhdWx0TGFuZ3VhZ2UsIGRhdGVPcHRpb25zIH0gIGZyb20gJy4vY29uc3RhbnRzJztcclxuXHJcbmNvbnN0IHN0YXRlID0ge1xyXG4gICAgY2F0ZWdvcnk6ICcnLFxyXG4gICAgY291bnRyeTogJycsXHJcbiAgICBrZXlXb3JkOiAnJ1xyXG59O1xyXG5cclxuY29uc3QgZ2V0RGF0YSA9ICh7IGVuZFBvaW50ID0gJ3RvcC1oZWFkbGluZXMnLCBjYXRlZ29yeSwgY291bnRyeSwgc291cmNlLCBrZXlXb3JkIH0pID0+IHtcclxuICAgIGxldCB1cmw7XHJcbiAgICBcclxuICAgIGlmKGVuZFBvaW50ID09PSAnc291cmNlcycpIHtcclxuICAgICAgICB1cmwgPSBgJHtiYXNlVXJsfS8ke2VuZFBvaW50fT9hcGlLZXk9JHthcGlLZXl9YDtcclxuICAgIH0gZWxzZSBpZiAoc291cmNlKSB7XHJcbiAgICAgICAgdXJsID0gYCR7YmFzZVVybH0vJHtlbmRQb2ludH0/c291cmNlcz0ke3NvdXJjZX0mYXBpS2V5PSR7YXBpS2V5fWA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVybCA9IGAke2Jhc2VVcmx9LyR7ZW5kUG9pbnR9P2NvdW50cnk9JHtjb3VudHJ5fSZjYXRlZ29yeT0ke2NhdGVnb3J5fSZxPSR7a2V5V29yZH0mbGFuZ3VhZ2U9JHtkZWZhdWx0TGFuZ3VhZ2V9JmFwaUtleT0ke2FwaUtleX1gO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGZldGNoKHJlcXVlc3QpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4geyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGRhdGEuc3RhdHVzID09PSAnb2snID8gcmVzb2x2ZShkYXRhKSA6IHJlamVjdChkYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKG1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pOyBcclxufTtcclxuXHJcbmNvbnN0IGdldFNvdXJjZXMgPSAoKSA9PiB7ICAgICAgIFxyXG4gICAgcmV0dXJuIGdldERhdGEoeyBlbmRQb2ludDogJ3NvdXJjZXMnIH0pOyAgXHJcbn07XHJcblxyXG5jb25zdCBmaWxsU2VsZWN0b3IgPSAoc2VsZWN0b3IsIGRhdGEsIHRlbXBsYXRlSWQpID0+IHtcclxuICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGVtcGxhdGVJZCk7IFxyXG4gICAgY29uc3QgdGVtcGxhdGVDb250ZW50ID0gdGVtcGxhdGUuY29udGVudDsgXHJcbiAgICBjb25zdCBsaXN0SXRlbSA9IHRlbXBsYXRlQ29udGVudC5xdWVyeVNlbGVjdG9yKCdsaScpO1xyXG5cclxuICAgIGZvcihsZXQgaXRlbSBpbiBkYXRhKSB7ICAgICAgICAgICAgXHJcbiAgICAgICAgbGlzdEl0ZW0udGV4dENvbnRlbnQgPSBpdGVtO1xyXG4gICAgICAgIGxpc3RJdGVtLmlkID0gZGF0YVtpdGVtXTtcclxuICAgICAgICBjb25zdCBpdGVtQ2xvbmUgPSBkb2N1bWVudC5pbXBvcnROb2RlKHRlbXBsYXRlQ29udGVudCwgdHJ1ZSk7XHJcbiAgICAgICAgc2VsZWN0b3IuYXBwZW5kQ2hpbGQoaXRlbUNsb25lKTsgICAgICAgIFxyXG4gICAgfVxyXG59O1xyXG5cclxuY29uc3QgaGFuZGxlU2VsZWN0b3JJdGVtID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICBjb25zdCBjbGFzc0xpc3QgPSB0YXJnZXQgJiYgQXJyYXkuZnJvbSh0YXJnZXQuY2xhc3NMaXN0KTtcclxuICAgIGNvbnN0IGl0ZW1UeXBlID0gY2xhc3NMaXN0ICYmIGNsYXNzTGlzdC5maW5kKChpdGVtKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0uaW5jbHVkZXMoJ3NlbGVjdG9yLWl0ZW0nKTtcclxuICAgIH0pO1xyXG4gICAgICBcclxuICAgIGlmKGl0ZW1UeXBlKSB7ICAgICAgICBcclxuICAgICAgICBjb25zdCBpdGVtVGV4dCA9IHRhcmdldC5pbm5lckhUTUw7XHJcbiAgICAgICAgY29uc3QgaXRlbUlkID0gdGFyZ2V0LmlkO1xyXG5cclxuICAgICAgICBzd2l0Y2goaXRlbVR5cGUpIHtcclxuICAgICAgICBjYXNlICdjb3VudHJ5LXNlbGVjdG9yLWl0ZW0nOlxyXG4gICAgICAgICAgICBpZihpdGVtSWQgPT09ICd1bnNlbGVjdGVkLWNvdW50cnknICkge1xyXG4gICAgICAgICAgICAgICAgY291bnRyeVNlbGVjdG9yTGFiZWwuaW5uZXJIVE1MID0gJ1NlbGVjdCBDb3VudHJ5JztcclxuICAgICAgICAgICAgICAgIHN0YXRlLmNvdW50cnkgPSAnJzsgXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudHJ5U2VsZWN0b3JMYWJlbC5pbm5lckhUTUwgPSBpdGVtVGV4dDtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmNvdW50cnkgPSBpdGVtSWQ7ICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgICBcclxuICAgICAgICBjYXNlICdjYXRlZ29yeS1zZWxlY3Rvci1pdGVtJzogICBcclxuICAgICAgICAgICAgaWYoaXRlbUlkID09PSAndW5zZWxlY3RlZC1jYXRlZ29yeScgKSB7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yeVNlbGVjdG9yTGFiZWwuaW5uZXJIVE1MID0gJ1NlbGVjdCBDYXRlZ29yeSc7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5jYXRlZ29yeSA9ICcnOyBcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3J5U2VsZWN0b3JMYWJlbC5pbm5lckhUTUwgPSBpdGVtVGV4dDtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmNhdGVnb3J5ID0gaXRlbUlkOyAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfSAgICAgICAgICAgXHJcbiAgICB9ICAgICAgICBcclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZVNlbGVjdG9yID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50VGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldDsgICAgXHJcbiAgICBsZXQgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgbGV0IGlzU2VsZWN0b3I7XHJcbiAgICBsZXQgc2VsZWN0b3JUeXBlO1xyXG4gICBcclxuICAgIHdoaWxlKHRhcmdldCAhPT0gY3VycmVudFRhcmdldCkgeyAgICAgICAgXHJcbiAgICAgICAgaWYodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnb3B0aW9uLWxpc3QtY29udGFpbmVyJykpIHtcclxuICAgICAgICAgICAgaXNTZWxlY3RvciA9IHRydWU7ICAgIFxyXG4gICAgICAgICAgICBzZWxlY3RvclR5cGUgPSB0YXJnZXQuaWQ7ICAgICAgICBcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xyXG4gICAgfSAgICBcclxuXHJcbiAgICBpZihpc1NlbGVjdG9yICYmIHNlbGVjdG9yVHlwZSkge1xyXG4gICAgICAgIHNob3dMaXN0KHNlbGVjdG9yVHlwZSk7XHJcbiAgICB9ICBcclxufTtcclxuXHJcbmNvbnN0IHNob3dMaXN0ID0gc2VsZWN0b3JUeXBlID0+IHtcclxuICAgIHN3aXRjaChzZWxlY3RvclR5cGUpIHtcclxuICAgIGNhc2UgJ2NhdGVnb3JpZXMnOiAgICAgICAgXHJcbiAgICAgICAgY2F0ZWdvcnlTZWxlY3Rvci5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgY2FzZSAnY291bnRyaWVzJzpcclxuICAgICAgICBjb3VudHJ5U2VsZWN0b3IuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn07XHJcblxyXG5jb25zdCBoYW5kbGVLZXlXb3JkSW5wdXQgPSAoZXZlbnQpID0+IHtcclxuICAgIGNvbnN0IHRleHQgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICBzdGF0ZS5rZXlXb3JkID0gdGV4dDsgICAgXHJcbn07XHJcblxyXG5jb25zdCBmaWxsU291cmNlc01vZGFsID0gKHNvdXJjZXMsIHNvdXJjZXNNb2RhbCkgPT4geyAgIFxyXG4gICAgY29uc3Qgc291cmNlc0NvbnRhaW5lciA9IHNvdXJjZXNNb2RhbC5xdWVyeVNlbGVjdG9yKCcuc291cmNlcy1jb250YWluZXInKTsgICAgXHJcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHNvdXJjZXNDb250YWluZXIucXVlcnlTZWxlY3RvcignI3NvdXJjZS1pdGVtLXRlbXBsYXRlJyk7IFxyXG4gICAgY29uc3QgdGVtcGxhdGVDb250ZW50ID0gdGVtcGxhdGUuY29udGVudDsgXHJcbiAgICBjb25zdCBzb3VyY2VJdGVtID0gdGVtcGxhdGVDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3VyY2UtaXRlbScpO1xyXG5cclxuICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlKSA9PiB7XHJcbiAgICAgICAgc291cmNlSXRlbS50ZXh0Q29udGVudCA9IHNvdXJjZS5uYW1lO1xyXG4gICAgICAgIHNvdXJjZUl0ZW0uaWQgPSBzb3VyY2UuaWQ7XHJcbiAgICAgICAgY29uc3QgaXRlbUNsb25lID0gZG9jdW1lbnQuaW1wb3J0Tm9kZSh0ZW1wbGF0ZUNvbnRlbnQsIHRydWUpO1xyXG4gICAgICAgIHNvdXJjZXNDb250YWluZXIuYXBwZW5kQ2hpbGQoaXRlbUNsb25lKTsgXHJcbiAgICB9KTtcclxufTtcclxuXHJcbmNvbnN0IHNob3dPckhpZGVTb3VyY2VzTW9kYWwgPSAoKSA9PiB7XHJcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcclxuICAgIG1haW5QYWdlLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xyXG4gICAgc291cmNlc01vZGFsLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xyXG4gICAgc291cmNlc01vZGFsLnNjcm9sbFRvcCA9IDA7XHJcbn07XHJcblxyXG5jb25zdCBnZXROZXdzQnlTb3VyY2UgPSAoc291cmNlKSA9PiB7XHJcbiAgICBzd2l0Y2hMb2FkaW5nSW5kaWNhdGlvbigpO1xyXG4gICAgXHJcbiAgICBnZXREYXRhKHsgc291cmNlIH0pXHJcbiAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgc2hvd05ld3MoZGF0YS5hcnRpY2xlcyk7ICAgICAgICBcclxuICAgICAgICAgICAgc3dpdGNoTG9hZGluZ0luZGljYXRpb24oKTsgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfSkuY2F0Y2goKG1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBoYW5kbGVTb3VyY2VJdGVtID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICBcclxuICAgIGlmKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3NvdXJjZS1pdGVtJykpIHtcclxuICAgICAgICBzaG93T3JIaWRlU291cmNlc01vZGFsKCk7XHJcbiAgICAgICAgZ2V0TmV3c0J5U291cmNlKHRhcmdldC5pZCk7ICAgIFxyXG4gICAgfSAgIFxyXG59O1xyXG5cclxuY29uc3QgZ2V0RmlsdGVyZWROZXdzID0gKCkgPT4geyAgICAgICAgICAgXHJcbiAgICBzd2l0Y2hMb2FkaW5nSW5kaWNhdGlvbigpO1xyXG5cclxuICAgIGdldERhdGEoc3RhdGUpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICBzaG93TmV3cyhkYXRhLmFydGljbGVzKTsgICAgXHJcbiAgICAgICAgc3dpdGNoTG9hZGluZ0luZGljYXRpb24oKTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgfSkuY2F0Y2goKG1lc3NhZ2UpID0+IHtcclxuICAgICAgICB0aHJvdyBFcnJvcihtZXNzYWdlKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuY29uc3Qgc3dpdGNoTG9hZGluZ0luZGljYXRpb24gPSAoKSA9PiB7XHJcbiAgICBuZXdzQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2xvYWRpbmcnKTtcclxufTtcclxuXHJcbmNvbnN0IHNob3dOZXdzID0gYXJ0aWNsZXMgPT4ge1xyXG4gICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXJ0aWNsZS10ZW1wbGF0ZScpO1xyXG4gICAgY29uc3QgdGVtcGxhdGVDb250ZW50ID0gdGVtcGxhdGUuY29udGVudDtcclxuICAgIGNvbnN0IHRpdGxlID0gdGVtcGxhdGVDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJ2gyJyk7XHJcbiAgICBjb25zdCBpbWFnZSA9IHRlbXBsYXRlQ29udGVudC5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGVtcGxhdGVDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZXNjcmlwdGlvbicpO1xyXG4gICAgY29uc3QgYXV0aG9yID0gdGVtcGxhdGVDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRob3InKTtcclxuICAgIGNvbnN0IGRhdGUgPSB0ZW1wbGF0ZUNvbnRlbnQucXVlcnlTZWxlY3RvcignLmRhdGUnKTtcclxuICAgIGNvbnN0IGxpbmsgPSB0ZW1wbGF0ZUNvbnRlbnQucXVlcnlTZWxlY3RvcignLm5ld3MtbGluaycpO1xyXG4gICAgY29uc3QgYXV0aG9yQ29udGFpbmVyID0gdGVtcGxhdGVDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRob3ItY29udGFpbmVyJyk7XHJcbiAgICBjb25zdCBkYXRlQ29udGFpbmVyID0gdGVtcGxhdGVDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXRlLWNvbnRhaW5lcicpO1xyXG5cclxuICAgIFtpbWFnZSwgYXV0aG9yQ29udGFpbmVyLCBkYXRlQ29udGFpbmVyXS5mb3JFYWNoKChub2RlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2xhc3NMaXN0ID0gbm9kZS5jbGFzc0xpc3Q7XHJcbiAgICAgICAgY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4nKSAmJiBjbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIG5ld3NDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBhcnRpY2xlcy5mb3JFYWNoKChhcnRpY2xlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsVG9JbWFnZSA9IGFydGljbGUudXJsVG9JbWFnZTtcclxuICAgICAgICBjb25zdCBhcnRpY2xlQXV0aG9yID0gYXJ0aWNsZS5hdXRob3I7XHJcbiAgICAgICAgY29uc3QgYXJ0aWNsZURhdGUgPSBhcnRpY2xlLnB1Ymxpc2hlZEF0OyAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHVybFRvSW1hZ2UgPT09IG51bGwgPyBpbWFnZS5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKSA6IGltYWdlLnNyYyA9IHVybFRvSW1hZ2U7XHJcbiAgICAgICAgYXJ0aWNsZUF1dGhvciA9PT0gbnVsbCA/IGF1dGhvckNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKSA6IGF1dGhvci50ZXh0Q29udGVudCA9IGFydGljbGVBdXRob3I7XHJcbiAgICAgICAgYXJ0aWNsZURhdGUgPT09IG51bGwgPyBkYXRlQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpIDogZGF0ZS50ZXh0Q29udGVudCA9IG5ldyBEYXRlKGFydGljbGVEYXRlKS50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVTJywgZGF0ZU9wdGlvbnMpO1xyXG4gICAgICAgIHRpdGxlLnRleHRDb250ZW50ID0gYXJ0aWNsZS50aXRsZTtcclxuICAgICAgICBkZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IGFydGljbGUuZGVzY3JpcHRpb247ICBcclxuICAgICAgICBsaW5rLmhyZWYgPSBhcnRpY2xlLnVybDtcclxuXHJcbiAgICAgICAgY29uc3QgYXJ0aWNsZUNsb25lID0gZG9jdW1lbnQuaW1wb3J0Tm9kZSh0ZW1wbGF0ZUNvbnRlbnQsIHRydWUpO1xyXG4gICAgICAgIG5ld3NDb250YWluZXIuYXBwZW5kQ2hpbGQoYXJ0aWNsZUNsb25lKTsgXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgbmV3c2xpc3Quc2Nyb2xsVG9wID0gMDsgXHJcbn07XHJcblxyXG5jb25zdCBzaG93T3B0aW9ucyA9ICgpID0+IHtcclxuICAgIGlmKG9wdGlvbnNDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJykpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgb3B0aW9uc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGlkZU9wdGlvbnMpO1xyXG4gICAgfSwgMTApO1xyXG59O1xyXG5cclxuY29uc3QgaGlkZU9wdGlvbnMgPSAoZXZlbnQpID0+IHtcclxuICAgIGxldCB0YXJnZXQgPSBldmVudC50YXJnZXQ7IFxyXG4gICAgY29uc3QgY3VycmVudFRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7ICBcclxuXHJcbiAgICB3aGlsZSh0YXJnZXQgIT09IGN1cnJlbnRUYXJnZXQpIHtcclxuICAgICAgICBjb25zdCBjbGFzc0xpc3QgPSB0YXJnZXQuY2xhc3NMaXN0O1xyXG5cclxuICAgICAgICBpZihjbGFzc0xpc3QuY29udGFpbnMoJ3NlYXJjaC1vcHRpb25zJykpIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSBpZihjbGFzc0xpc3QuY29udGFpbnMoJ2dldC1uZXdzJykpIHtcclxuICAgICAgICAgICAgYnJlYWs7ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgfVxyXG4gICAgb3B0aW9uc0NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGlkZU9wdGlvbnMpO1xyXG59O1xyXG5cclxuXHJcbmNvbnN0IG1haW5QYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21haW4tcGFnZScpO1xyXG5jb25zdCBjb3VudHJ5U2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY291bnR5LXNlbGVjdG9yJyk7XHJcbmNvbnN0IGNhdGVnb3J5U2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2F0ZWdvcnktc2VsZWN0b3InKTtcclxuY29uc3QgZ2V0TmV3c0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nZXQtbmV3cycpO1xyXG5jb25zdCBvcHRpb25zQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaC1vcHRpb25zJyk7XHJcbmNvbnN0IGNvdW50cnlTZWxlY3RvckxhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkLWNvdW50cnknKTtcclxuY29uc3QgY2F0ZWdvcnlTZWxlY3RvckxhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkLWNhdGVnb3R5Jyk7XHJcbmNvbnN0IGtleVdvcmRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrZXktd29yZCcpO1xyXG5jb25zdCBuZXdzQnlTb3VyY2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc291cmNlcy1idXR0b24nKTtcclxuY29uc3Qgc291cmNlc01vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNvdXJjZXMtbW9kYWwnKTtcclxuY29uc3Qgc291cmNlc01vZGFsQ2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2xvc2UtbW9kYWwtYnV0dG9uJyk7XHJcbmNvbnN0IG5ld3NDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3cy1jb250YWluZXInKTtcclxuY29uc3QgbmV3c2xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi13cmFwcGVyJyk7XHJcbmNvbnN0IG9wdGlvbnNIdW1idXJnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3B0aW9ucy1odW1iJyk7XHJcbmNvbnN0IHNvdXJjZXNIdW1idXJnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc291cmNlcy1odW1iJyk7XHJcblxyXG5jYXRlZ29yeVNlbGVjdG9yLm9uY2xpY2sgPSBoYW5kbGVTZWxlY3Rvckl0ZW07XHJcbmNvdW50cnlTZWxlY3Rvci5vbmNsaWNrID0gaGFuZGxlU2VsZWN0b3JJdGVtO1xyXG5vcHRpb25zQ29udGFpbmVyLm9uY2xpY2sgPSBoYW5kbGVTZWxlY3RvcjtcclxuZ2V0TmV3c0J1dHRvbi5vbmNsaWNrID0gZ2V0RmlsdGVyZWROZXdzO1xyXG5uZXdzQnlTb3VyY2VCdXR0b24ub25jbGljayA9IHNob3dPckhpZGVTb3VyY2VzTW9kYWw7XHJcbmtleVdvcmRJbnB1dC5vbmNoYW5nZSA9IGhhbmRsZUtleVdvcmRJbnB1dDtcclxuc291cmNlc01vZGFsQ2xvc2VCdXR0b24ub25jbGljayA9IHNob3dPckhpZGVTb3VyY2VzTW9kYWw7XHJcbnNvdXJjZXNNb2RhbC5vbmNsaWNrID0gaGFuZGxlU291cmNlSXRlbTtcclxuc291cmNlc0h1bWJ1cmdlci5vbmNsaWNrID0gc2hvd09ySGlkZVNvdXJjZXNNb2RhbDtcclxub3B0aW9uc0h1bWJ1cmdlci5vbmNsaWNrID0gc2hvd09wdGlvbnM7XHJcblxyXG5maWxsU2VsZWN0b3IoY291bnRyeVNlbGVjdG9yLCBjb3VudHJpZXMsJ2NvdW50cnktaXRlbS10ZW1wbGF0ZScpO1xyXG5maWxsU2VsZWN0b3IoY2F0ZWdvcnlTZWxlY3RvciwgY2F0ZWdvcmllcywnY2F0ZWdvcnktaXRlbS10ZW1wbGF0ZScpO1xyXG5cclxuZ2V0U291cmNlcygpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgIGZpbGxTb3VyY2VzTW9kYWwoZGF0YS5zb3VyY2VzLCBzb3VyY2VzTW9kYWwpO1xyXG59KS5jYXRjaCgobWVzc2FnZSkgPT4ge1xyXG4gICAgdGhyb3cgRXJyb3IobWVzc2FnZSk7XHJcbn0pO1xyXG5cclxuZ2V0RmlsdGVyZWROZXdzKCk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")}]);